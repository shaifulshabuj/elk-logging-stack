version: '3.8'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: elasticsearch
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      - elk
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    container_name: logstash
    volumes:
      - ./config/logstash/:/usr/share/logstash/pipeline/
      - ./sample_logs/:/usr/share/logstash/sample_logs/
    ports:
      - "5001:5000"
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - elk
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/_node/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    volumes:
      - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ./config/kibana/sample-app-dashboards.ndjson:/usr/share/kibana/config/sample-app-dashboards.ndjson
    depends_on:
      - elasticsearch
    networks:
      - elk
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  elasticsearch-init:
    image: curlimages/curl:latest
    container_name: elasticsearch-init
    volumes:
      - ./config/elasticsearch/index_lifecycle_policy.json:/usr/local/init/index_lifecycle_policy.json
      - ./config/elasticsearch/index_templates.json:/usr/local/init/index_templates.json
      - ./config/elasticsearch/init_elasticsearch.sh:/usr/local/bin/init_elasticsearch.sh
    command: ["/bin/sh", "-c", "chmod +x /usr/local/bin/init_elasticsearch.sh && /usr/local/bin/init_elasticsearch.sh"]
    depends_on:
      - elasticsearch
    networks:
      - elk

  kibana-init:
    image: curlimages/curl:latest
    container_name: kibana-init
    volumes:
      - ./config/kibana/setup_kibana.sh:/usr/local/bin/setup_kibana.sh
      - ./config/kibana/sample-app-dashboards.ndjson:/usr/share/kibana/config/sample-app-dashboards.ndjson
    command: ["/bin/sh", "-c", "chmod +x /usr/local/bin/setup_kibana.sh && /usr/local/bin/setup_kibana.sh"]
    depends_on:
      - elasticsearch
      - kibana
    networks:
      - elk

  sample-app:
    build:
      context: ./sample-app
    container_name: sample-app
    ports:
      - "8080:3000"
    environment:
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
      - PORT=3000
    depends_on:
      - logstash
    networks:
      - elk
    restart: unless-stopped

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch_data:
    driver: local